stages:
  - test
  - build
  - deploy

variables:
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA

push to docker registry:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
  only:
    - master

deploy to staging:
  stage: deploy
  image: alpine
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s
      https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl config set-cluster $K8S_CLUSTER_NAME --server=$K8S_SERVER
      --insecure-skip-tls-verify=true
    - kubectl config set clusters.k8s.certificate-authority-data $K8S_CERTIFICATE_AUTHORITY_DATA
    - kubectl config set-credentials $K8S_USER_NAME --token=$K8S_USER_TOKEN
    - kubectl config set-context staging --cluster=$K8S_CLUSTER_NAME --user=$K8S_USER_NAME
      --namespace=staging
    - kubectl config use-context staging
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry
      $CI_PROJECT_NAME-gitlab-registry --docker-server=$CI_REGISTRY
      --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD
      --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    # pass env variables, which names start with "STAGING_" to application running in kubernetes
    - env | sed -n "s/^STAGING_\(.*\)$/\1/p" > k8s_prefixed_variables
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret generic $CI_PROJECT_NAME-secret
      --from-env-file k8s_prefixed_variables -o yaml --dry-run)" | kubectl apply -f -'
    - rm k8s_prefixed_variables
    # generate deployment file
    - sed 's _APP_NAME_ '"$CI_PROJECT_NAME"' g; s _CONTAINER_IMAGE_ '"$CONTAINER_IMAGE"' g'
      kubernetes.tpl.yml > kubernetes.yml;
    - kubectl apply -f kubernetes.yml
  environment:
    name: staging
  only:
    - master

deploy to prod:
  stage: deploy
  image: alpine
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s
      https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - kubectl config set-cluster $K8S_CLUSTER_NAME --server=$K8S_SERVER
      --insecure-skip-tls-verify=true
    - kubectl config set clusters.k8s.certificate-authority-data $K8S_CERTIFICATE_AUTHORITY_DATA
    - kubectl config set-credentials $K8S_USER_NAME --token=$K8S_USER_TOKEN
    - kubectl config set-context prodution --cluster=$K8S_CLUSTER_NAME --user=$K8S_USER_NAME
    - kubectl config use-context prodution
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret docker-registry
      $CI_PROJECT_NAME-gitlab-registry --docker-server=$CI_REGISTRY
      --docker-username=$CI_DEPLOY_USER --docker-password=$CI_DEPLOY_PASSWORD
      --docker-email=$GITLAB_USER_EMAIL -o yaml --dry-run)" | kubectl apply -f -'
    # pass env variables, which names start with "PROD_" to application running in kubernetes
    - env | sed -n "s/^PROD_\(.*\)$/\1/p" > k8s_prefixed_variables
    - 'printf "apiVersion: v1\nkind: Secret\n$(kubectl create secret generic $CI_PROJECT_NAME-secret
      --from-env-file k8s_prefixed_variables -o yaml --dry-run)" | kubectl apply -f -'
    - rm k8s_prefixed_variables
    # generate deployment file
    - sed 's _APP_NAME_ '"$CI_PROJECT_NAME"' g; s _CONTAINER_IMAGE_ '"$CONTAINER_IMAGE"' g'
      kubernetes.tpl.yml > kubernetes.yml;
    - kubectl apply -f kubernetes.yml
  environment:
    name: prod
  when: manual
  only:
    - master
